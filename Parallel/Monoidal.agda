module Parallel.Monoidal where

open import Data.Unit
open import Data.Empty
open import Data.Sum renaming (map to map‚äé)
open import Data.Nat hiding (_‚äî_)
open import Data.Product renaming (map to map√ó)
open import Relation.Binary.PropositionalEquality hiding ([_])


open import Slice-Functions.Base
open import Slice-Functions.Monoidal
open import Monads.Trace

open import Parallel.Base



-- Pseudomonoidal monad
‚Ñô-monoid-unit : (A E X Y : Set) ‚Üí SF‚â° (SF-‚àò (SF-T-Œ∑ A E X ‚äó SF-T-Œ∑ A E Y) (‚Ñô A E X Y))
                                             (SF-T-Œ∑ A E (X √ó Y))
‚Ñô-monoid-unit A E X Y = (Œª { p (i , inj‚ÇÅ tt) ‚Üí tt , refl ; p (i , inj‚ÇÇ tt) ‚Üí tt , refl}) ,
                        Œª x i ‚Üí ((tt , tt) , (inj‚ÇÅ tt)) , refl


‚Ñô-pseudo-mult : (A E X Y : Set)
  ‚Üí SF‚â§ (SF-‚àò (‚Ñô A E _ _) (SF-‚àò (SF-T A E (‚Ñô A E X Y)) (SF-T-Œº A E _)))
          (SF-‚àò (SF-T-Œº A E X ‚äó SF-T-Œº A E Y) (‚Ñô A E X Y))
‚Ñô-pseudo-mult A E X Y (act a d , q) (inj‚ÇÅ i , j , tt)
  with ‚Ñô-pseudo-mult A E X Y (d , q) (i , (j , tt))
... | (u , v) , eq = ((tt , tt) , (inj‚ÇÅ v)) , cong (act a) eq
‚Ñô-pseudo-mult A E X Y (err e , q) (inj‚ÇÅ i , j , tt) = ((tt , tt) , (inj‚ÇÅ tt)) , refl
‚Ñô-pseudo-mult A E X Y (ret x , act a q) (inj‚ÇÇ i , j , tt)
    with ‚Ñô-pseudo-mult A E X Y (ret x , q) (i , (j , tt))
... | (u , v) , eq = ((tt , tt) , (inj‚ÇÇ v)) , cong (act a) eq
‚Ñô-pseudo-mult A E X Y (act b d , act a q) (inj‚ÇÇ i , j , tt)
    with ‚Ñô-pseudo-mult A E X Y (act b d , q) (i , (j , tt))
... | (u , v) , eq = ((tt , tt) , (inj‚ÇÇ v)) , cong (act a) eq
‚Ñô-pseudo-mult A E X Y (err e , act a q) (inj‚ÇÇ i , j , tt)
    with ‚Ñô-pseudo-mult A E X Y (err e , q) (i , (j , tt))
... | (u , v) , eq = ((tt , tt) , (inj‚ÇÇ v)) , cong (act a) eq
‚Ñô-pseudo-mult A E X Y (ret t , err e) (inj‚ÇÇ i , j , tt) = ((tt , tt) , (inj‚ÇÇ tt)) , refl
‚Ñô-pseudo-mult A E X Y (act a d , err e) (inj‚ÇÇ i , j , tt) = ((tt , tt) , (inj‚ÇÇ tt)) , refl
‚Ñô-pseudo-mult A E X Y (err f , err e) (inj‚ÇÇ i , j , tt) = ((tt , tt) , (inj‚ÇÇ tt)) , refl
‚Ñô-pseudo-mult A E X Y (ret t , ret r) (inj‚ÇÇ i , j , tt) = ((tt , tt) , j) , refl
‚Ñô-pseudo-mult A E X Y (ret t , ret r) (inj‚ÇÅ i , j , tt) = ((tt , tt) , j) , refl


-- Monoidal comonad (dependent on naturality of ‚Ñô)
‚Ñô-moncom-unit : (A E X Y : Set) ‚Üí SF‚â° (SF-‚àò (‚Ñô A E X Y) (SF-T-Œµ A E (X √ó Y)))
  (SF-T-Œµ A E X ‚äó SF-T-Œµ A E Y)
proj‚ÇÅ (‚Ñô-moncom-unit A E X Y) (ret x , ret y) (inj‚ÇÅ i , j) = (tt , tt) , refl
proj‚ÇÅ (‚Ñô-moncom-unit A E X Y) (ret x , ret y) (inj‚ÇÇ i , j) = (tt , tt) , refl
proj‚ÇÇ (‚Ñô-moncom-unit A E X Y) (ret x , ret y) (i , j) = ((inj‚ÇÅ tt) , tt) , refl



‚Ñô-moncom-mult< : (A E X Y : Set) ‚Üí SF‚â§ (SF-‚àò (‚Ñô A E X Y) (SF-T-Œ¥ A E (X √ó Y)))
  (SF-‚àò (SF-T-Œ¥ A E X ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (‚Ñô A E _ _) (SF-T A E (‚Ñô A E X Y))))
‚Ñô-moncom-multùïÉ< : (A E X Y : Set) ‚Üí SF‚â§ (SF-‚àò (ùïÉ A E X Y) (SF-T-Œ¥ A E (X √ó Y)))
  (SF-‚àò (SF-T-Œ¥ A E X ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (‚Ñô A E _ _) (SF-T A E (‚Ñô A E X Y))))
‚Ñô-moncom-mult‚Ñù< : (A E X Y : Set) ‚Üí SF‚â§ (SF-‚àò (‚Ñù A E X Y) (SF-T-Œ¥ A E (X √ó Y)))
  (SF-‚àò (SF-T-Œ¥ A E X ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (‚Ñô A E _ _) (SF-T A E (‚Ñô A E X Y))))

‚Ñô-moncom-mult< A E X Y l-r (inj‚ÇÅ i , j) = ‚Ñô-moncom-multùïÉ< A E X Y l-r (i , j)
‚Ñô-moncom-mult< A E X Y l-r (inj‚ÇÇ i , j) = ‚Ñô-moncom-mult‚Ñù< A E X Y l-r (i , j)

‚Ñô-moncom-multùïÉ< A E X Y (act a l , r) (i , inj‚ÇÇ j)
  with ‚Ñô-moncom-mult< A E X Y (l , r) (i , j)
... | ((u , v) , (w , p)) , eq = ((inj‚ÇÇ u  , v) , inj‚ÇÅ w , p) , cong (act a) eq
‚Ñô-moncom-multùïÉ< A E X Y (err e , r) (i , inj‚ÇÇ y) =
  (((inj‚ÇÇ tt) , SF-T-Œ¥-Total A E Y r) , (inj‚ÇÅ tt) , tt) , refl
‚Ñô-moncom-multùïÉ< A E X Y (ret x , ret y) (i , j) =
  ((tt , tt) , ((inj‚ÇÅ tt) , (inj‚ÇÅ tt))) , refl
‚Ñô-moncom-multùïÉ< A E X Y (act a l , ret y) (i , inj‚ÇÅ j) =
  (((inj‚ÇÅ tt) , tt) , ((inj‚ÇÅ tt) , (inj‚ÇÅ i))) , refl
‚Ñô-moncom-multùïÉ< A E X Y (act a l , act b r) (i , inj‚ÇÅ j) =
  (((inj‚ÇÅ tt) , inj‚ÇÅ tt) , (inj‚ÇÅ tt) , (inj‚ÇÅ i)) , refl
‚Ñô-moncom-multùïÉ< A E X Y (act a l , err e) (i , inj‚ÇÅ j) =
  (((inj‚ÇÅ tt) , inj‚ÇÅ tt) , (inj‚ÇÅ tt) , (inj‚ÇÅ i)) , refl
‚Ñô-moncom-multùïÉ< A E X Y (err e , ret y) (i , inj‚ÇÅ x) =
  (((inj‚ÇÅ tt) , tt) , ((inj‚ÇÅ tt) , (inj‚ÇÅ tt))) , refl
‚Ñô-moncom-multùïÉ< A E X Y (err e , act a r) (i , inj‚ÇÅ x) =
  (((inj‚ÇÅ tt) , (inj‚ÇÅ tt)) , ((inj‚ÇÅ tt) , (inj‚ÇÅ tt))) , refl
‚Ñô-moncom-multùïÉ< A E X Y (err e , err v) (i , inj‚ÇÅ x) =
  (((inj‚ÇÅ tt ) , (inj‚ÇÅ tt)) , ((inj‚ÇÅ tt) , (inj‚ÇÅ tt))) , refl

‚Ñô-moncom-mult‚Ñù< A E X Y  (l , act a r) (i , inj‚ÇÇ j)
  with ‚Ñô-moncom-mult< A E X Y (l , r) (i , j)
... | ((u , v) , (w , p)) , eq = ((u , inj‚ÇÇ v) , inj‚ÇÇ w , p) , cong (act a) eq
‚Ñô-moncom-mult‚Ñù< A E X Y (r , err e) (i , inj‚ÇÇ y) =
  ((SF-T-Œ¥-Total A E X r , (inj‚ÇÇ tt)) , (inj‚ÇÇ tt) , tt) , refl
‚Ñô-moncom-mult‚Ñù< A E X Y (ret x , ret y) (i , j) =
  ((tt , tt) , ((inj‚ÇÅ tt) , (inj‚ÇÅ tt))) , refl
‚Ñô-moncom-mult‚Ñù< A E X Y (ret y , act a l) (i , inj‚ÇÅ j) =
  ((tt , (inj‚ÇÅ tt)) , ((inj‚ÇÅ tt) , (inj‚ÇÇ i))) , refl
‚Ñô-moncom-mult‚Ñù< A E X Y  (act a l , act b r) (i , inj‚ÇÅ j) =
  (((inj‚ÇÅ tt) , inj‚ÇÅ tt) , (inj‚ÇÅ tt) , (inj‚ÇÇ i)) , refl
‚Ñô-moncom-mult‚Ñù< A E X Y (err e , act b r) (i , inj‚ÇÅ j) =
  (((inj‚ÇÅ tt) , inj‚ÇÅ tt) , (inj‚ÇÅ tt) , (inj‚ÇÇ i)) , refl
‚Ñô-moncom-mult‚Ñù< A E X Y  (ret x , err e) (i , inj‚ÇÅ tt) =
  ((tt , (inj‚ÇÅ tt)) , ((inj‚ÇÅ tt) , (inj‚ÇÇ tt))) , refl
‚Ñô-moncom-mult‚Ñù< A E X Y  (act a r , err e) (i , inj‚ÇÅ x) =
  (((inj‚ÇÅ tt) , (inj‚ÇÅ tt)) , ((inj‚ÇÅ tt) , (inj‚ÇÇ tt))) , refl
‚Ñô-moncom-mult‚Ñù< A E X Y  (err e , err v) (i , inj‚ÇÅ x) =
  (((inj‚ÇÅ tt ) , (inj‚ÇÅ tt)) , ((inj‚ÇÅ tt) , (inj‚ÇÇ tt))) , refl


‚Ñô-moncom-mult> : (A E X Y : Set)
  ‚Üí SF‚â§ (SF-‚àò (SF-T-Œ¥ A E X ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (‚Ñô A E _ _) (SF-T A E (‚Ñô A E X Y))))
          (SF-‚àò (‚Ñô A E X Y) (SF-T-Œ¥ A E (X √ó Y)))
‚Ñô-moncom-multùïÉ> : (A E X Y : Set)
  ‚Üí SF‚â§ (SF-‚àò (SF-T-Œ¥ A E X ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (ùïÉ A E _ _) (SF-T A E (‚Ñô A E X Y))))
          (SF-‚àò (‚Ñô A E X Y) (SF-T-Œ¥ A E (X √ó Y)))
‚Ñô-moncom-mult‚Ñù> : (A E X Y : Set)
  ‚Üí SF‚â§ (SF-‚àò (SF-T-Œ¥ A E X ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (‚Ñù A E _ _) (SF-T A E (‚Ñô A E X Y))))
          (SF-‚àò (‚Ñô A E X Y) (SF-T-Œ¥ A E (X √ó Y)))

‚Ñô-moncom-mult> A E X Y l-r (i , inj‚ÇÅ k , v) = ‚Ñô-moncom-multùïÉ> A E X Y l-r (i , k , v)
‚Ñô-moncom-mult> A E X Y l-r (i , inj‚ÇÇ k , v) = ‚Ñô-moncom-mult‚Ñù> A E X Y l-r (i , k , v)

‚Ñô-moncom-multùïÉ> A E X Y (act a t , r) ((inj‚ÇÇ i , j) , k , v)
  with ‚Ñô-moncom-mult> A E X Y (t , r) ((i , j) , k , v)
... | (u , w) , eq = ((inj‚ÇÅ u) , (inj‚ÇÇ w)) , (cong (act a) eq)
‚Ñô-moncom-multùïÉ> A E X Y (err e , r) ((inj‚ÇÇ y , j) , k , v) = ((inj‚ÇÅ tt) , (inj‚ÇÇ tt)) , refl
‚Ñô-moncom-multùïÉ> A E X Y (ret x , ret y) ((i , j) , k , inj‚ÇÅ tt) = ((inj‚ÇÅ tt) , tt) , refl
‚Ñô-moncom-multùïÉ> A E X Y (ret x , ret y) ((i , j) , k , inj‚ÇÇ tt) = ((inj‚ÇÅ tt) , tt) , refl
‚Ñô-moncom-multùïÉ> A E X Y (ret x , act a r) ((i , inj‚ÇÅ j) , k , inj‚ÇÇ y) =
  ((inj‚ÇÇ y) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-multùïÉ> A E X Y (ret x , err e) ((i , inj‚ÇÅ j) , k , inj‚ÇÇ tt) =
  ((inj‚ÇÇ tt) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-multùïÉ> A E X Y (act a t , ret y) ((inj‚ÇÅ i , j) , k , inj‚ÇÅ v) =
  (inj‚ÇÅ v , inj‚ÇÅ tt) , refl
‚Ñô-moncom-multùïÉ> A E X Y (act a t , act b r) ((inj‚ÇÅ i , inj‚ÇÅ x) , k , inj‚ÇÅ v) =
  ((inj‚ÇÅ v) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-multùïÉ> A E X Y (act a t , act b r) ((inj‚ÇÅ i , inj‚ÇÅ x) , k , inj‚ÇÇ v) =
  ((inj‚ÇÇ v) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-multùïÉ> A E X Y (act a t , err e) ((inj‚ÇÅ i , inj‚ÇÅ j) , k , inj‚ÇÅ v) =
  ((inj‚ÇÅ v) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-multùïÉ> A E X Y (act a t , err e) ((inj‚ÇÅ i , inj‚ÇÅ j) , k , inj‚ÇÇ v) =
  ((inj‚ÇÇ v) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-multùïÉ> A E X Y (err e , ret y) ((inj‚ÇÅ x , j) , k , inj‚ÇÅ tt) =
  ((inj‚ÇÅ tt) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-multùïÉ> A E X Y (err e , act b r) ((inj‚ÇÅ x , inj‚ÇÅ j) , k , inj‚ÇÅ v) =
  (inj‚ÇÅ v , inj‚ÇÅ tt) , refl
‚Ñô-moncom-multùïÉ> A E X Y (err e , act b r) ((inj‚ÇÅ x , inj‚ÇÅ j) , k , inj‚ÇÇ v) =
  (inj‚ÇÇ v , inj‚ÇÅ tt) , refl
‚Ñô-moncom-multùïÉ> A E X Y (err e , err f) ((inj‚ÇÅ i , inj‚ÇÅ j) , k , inj‚ÇÅ v) =
  ((inj‚ÇÅ tt) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-multùïÉ> A E X Y (err e , err f) ((inj‚ÇÅ i , inj‚ÇÅ j) , k , inj‚ÇÇ v) =
  ((inj‚ÇÇ tt) , (inj‚ÇÅ tt)) , refl

‚Ñô-moncom-mult‚Ñù> A E X Y (r , err e) ((y , inj‚ÇÇ j) , k , v) = ((inj‚ÇÇ tt) , (inj‚ÇÇ tt)) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (l , act a r) ((i , inj‚ÇÇ j) , k , v)
  with ‚Ñô-moncom-mult> A E X Y (l , r) ((i , j) , k , v)
... | (u , w) , eq = ((inj‚ÇÇ u) , (inj‚ÇÇ w)) , (cong (act a) eq)
‚Ñô-moncom-mult‚Ñù> A E X Y (ret x , ret y) ((i , j) , k , inj‚ÇÅ tt) = ((inj‚ÇÅ tt) , tt) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (ret x , ret y) ((i , j) , k , inj‚ÇÇ tt) = ((inj‚ÇÅ tt) , tt) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (act a l , ret x) ((inj‚ÇÅ i , j) , k , inj‚ÇÅ y) =
  ((inj‚ÇÅ y) , inj‚ÇÅ tt) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (err e , ret x) ((inj‚ÇÅ i , j) , k , inj‚ÇÅ tt) =
  ((inj‚ÇÅ tt) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (ret x , act a r) ((i , inj‚ÇÅ j) , k , inj‚ÇÇ v) =
  (inj‚ÇÇ v , inj‚ÇÅ tt) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (act a t , act b r) ((inj‚ÇÅ i , inj‚ÇÅ x) , k , inj‚ÇÅ v) =
  ((inj‚ÇÅ v) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (act a t , act b r) ((inj‚ÇÅ i , inj‚ÇÅ x) , k , inj‚ÇÇ v) =
  ((inj‚ÇÇ v) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (err e , act a r) ((inj‚ÇÅ i , inj‚ÇÅ j) , k , inj‚ÇÅ v) =
  ((inj‚ÇÅ v) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (err e , act a r) ((inj‚ÇÅ i , inj‚ÇÅ j) , k , inj‚ÇÇ v) =
  ((inj‚ÇÇ v) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (ret y , err e) ((x , inj‚ÇÅ j) , k , inj‚ÇÇ tt) =
  ((inj‚ÇÇ tt) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (act b r , err e) ((inj‚ÇÅ x , inj‚ÇÅ j) , k , inj‚ÇÅ v) =
  (inj‚ÇÅ v , inj‚ÇÅ tt) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (act b r , err e) ((inj‚ÇÅ x , inj‚ÇÅ j) , k , inj‚ÇÇ v) =
  (inj‚ÇÇ v , inj‚ÇÅ tt) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (err e , err f) ((inj‚ÇÅ i , inj‚ÇÅ j) , k , inj‚ÇÅ v) =
  ((inj‚ÇÅ tt) , (inj‚ÇÅ tt)) , refl
‚Ñô-moncom-mult‚Ñù> A E X Y (err e , err f) ((inj‚ÇÅ i , inj‚ÇÅ j) , k , inj‚ÇÇ v) =
  ((inj‚ÇÇ tt) , (inj‚ÇÅ tt)) , refl


‚Ñô-moncom-mult : (A E X Y : Set) ‚Üí SF‚â° (SF-‚àò (‚Ñô A E X Y) (SF-T-Œ¥ A E (X √ó Y)))
  (SF-‚àò (SF-T-Œ¥ A E X ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (‚Ñô A E _ _) (SF-T A E (‚Ñô A E X Y))))
‚Ñô-moncom-mult A E X Y = (‚Ñô-moncom-mult< A E X Y) , (‚Ñô-moncom-mult> A E X Y)




-- Interaction law equations
IL-unit-ùïÉ : (A E X Y : Set) ‚Üí SF‚â° (SF-‚àò (SF-T-Œ∑ A E X ‚äó SF-id _) (ùïÉ A E X Y))
                                   (SF-‚àò (SF-id _ ‚äó SF-T-Œµ A E Y) (SF-T-Œ∑ A E _))
proj‚ÇÅ (IL-unit-ùïÉ A E X Y) (x , ret y) i = ((tt , tt) , tt) , refl
proj‚ÇÇ (IL-unit-ùïÉ A E X Y) (x , ret y) i = ((tt , tt) , tt) , refl


IL-mult-ùïÉ : (A E X Y : Set) ‚Üí SF‚â° (SF-‚àò (SF-T-Œº A E X ‚äó SF-id _) (ùïÉ A E X Y))
  (SF-‚àò (SF-id _ ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (ùïÉ A E _ _)
        (SF-‚àò (SF-T A E (ùïÉ A E X Y)) (SF-T-Œº A E _)))) 
IL-mult-‚Ñô : (A E X Y : Set) ‚Üí SF‚â° (SF-‚àò (SF-T-Œº A E X ‚äó SF-id _) (‚Ñô A E X Y))
  (SF-‚àò (SF-id _ ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (‚Ñô A E _ _)
        (SF-‚àò (SF-T A E (ùïÉ A E X Y)) (SF-T-Œº A E _)))) 
IL-mult-‚Ñù< : (A E X Y : Set) ‚Üí SF‚â§ (SF-‚àò (SF-T-Œº A E X ‚äó SF-id _) (‚Ñù A E X Y))
  (SF-‚àò (SF-id _ ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (‚Ñô A E _ _)
        (SF-‚àò (SF-T A E (ùïÉ A E X Y)) (SF-T-Œº A E _))))
IL-mult-‚Ñù> : (A E X Y : Set) ‚Üí SF‚â§ (SF-‚àò (SF-id _ ‚äó SF-T-Œ¥ A E Y) (SF-‚àò (‚Ñù A E _ _)
        (SF-‚àò (SF-T A E (ùïÉ A E X Y)) (SF-T-Œº A E _))))
        (SF-‚àò (SF-T-Œº A E X ‚äó SF-id _) (‚Ñô A E X Y))

proj‚ÇÅ (IL-mult-ùïÉ A E X Y) (ret t , ret y) ((tt , tt) , i) =
  ((tt , tt) , (tt , (i , tt))) , refl
proj‚ÇÅ (IL-mult-ùïÉ A E X Y) (ret t , act a r) ((tt , tt) , i) =
  ((tt , (inj‚ÇÅ tt)) , (tt , (i , tt))) , refl
proj‚ÇÅ (IL-mult-ùïÉ A E X Y) (ret t , err e) ((tt , tt) , i) =
  ((tt , (inj‚ÇÅ tt)) , (tt , (i , tt))) , refl
proj‚ÇÅ (IL-mult-ùïÉ A E X Y) (act a d , r) ((tt , tt) , i)
  with proj‚ÇÅ (IL-mult-‚Ñô A E X Y) (d , r) ((tt , tt) , i)
... | (u , v) , w = (u , v) , cong (act a) w
proj‚ÇÅ (IL-mult-ùïÉ A E X Y) (err e , r) ((tt , tt) , i) = ((tt , (SF-T-Œ¥-Total A E Y r)) ,
  (tt , (tt , tt))) , refl 
proj‚ÇÇ (IL-mult-ùïÉ A E X Y) (ret t , ret y) (i , j , k , l) = ((tt , tt) , k) , refl
proj‚ÇÇ (IL-mult-ùïÉ A E X Y) (ret t , act a r) ((tt , inj‚ÇÅ tt) , j , k , l) =
  ((tt , tt) , k) , refl
proj‚ÇÇ (IL-mult-ùïÉ A E X Y) (ret t , err e) ((tt , inj‚ÇÅ tt) , j , k , l) =
  ((tt , tt) , k) , refl
proj‚ÇÇ (IL-mult-ùïÉ A E X Y) (act a d , r) ((tt , i) , j , k , l)
  with proj‚ÇÇ (IL-mult-‚Ñô A E X Y) (d , r) ((tt , i) , (j , (k , l)))
... | (u , v) , eq = (u , v) , cong (act a) eq
proj‚ÇÇ (IL-mult-ùïÉ A E X Y) (err e , r) ((tt , i) , j , k , l) = ((tt , tt) , tt) , refl

proj‚ÇÅ (IL-mult-‚Ñô A E X Y) (d , r) ((tt , tt) , inj‚ÇÅ i)
  with proj‚ÇÅ (IL-mult-ùïÉ A E X Y) (d , r) ((tt , tt) , i)
... | (u , v , w) , eq = (u , ((inj‚ÇÅ v) , w)) , eq
proj‚ÇÅ (IL-mult-‚Ñô A E X Y) (d , r) ((tt , tt) , inj‚ÇÇ i) =
  IL-mult-‚Ñù< A E X Y (d , r) ((tt , tt) , i)
proj‚ÇÇ (IL-mult-‚Ñô A E X Y) (d , r) (i , inj‚ÇÅ j , p)
   with proj‚ÇÇ (IL-mult-ùïÉ A E X Y) (d , r) (i , (j , p))
... | ((tt , tt) , u) , eq = ((tt , tt) , (inj‚ÇÅ u)) , eq
proj‚ÇÇ (IL-mult-‚Ñô A E X Y) (d , r) ((tt , i) , inj‚ÇÇ j , p , tt) =
  IL-mult-‚Ñù> A E X Y (d , r) ((tt , i) , (j , (p , tt)))


IL-mult-‚Ñù< A E X Y (d , act a r) ((tt , tt) , i)
  with proj‚ÇÅ (IL-mult-‚Ñô A E X Y) (d , r) ((tt , tt) , i)
... | ((tt , u) , v , k , l) , eq = ((tt , inj‚ÇÇ u) , inj‚ÇÇ v , k , l) , cong (act a) eq
IL-mult-‚Ñù< A E X Y (d , err e) ((tt , tt) , i) =
  ((tt , (inj‚ÇÇ tt)) , (inj‚ÇÇ tt , tt , tt)) , refl
IL-mult-‚Ñù< A E X Y (ret (ret x) , ret y) ((tt , tt) , i) =
  ((tt , tt) , ((inj‚ÇÇ tt) , (tt , tt))) , refl
IL-mult-‚Ñù> A E X Y (d , act a r) ((tt , inj‚ÇÇ i) , j , p , tt)
  with proj‚ÇÇ (IL-mult-‚Ñô A E X Y) (d , r) ((tt , i) , (j , (p , tt)))
... | ((tt , tt) , k) , eq = ((tt , tt) , inj‚ÇÇ k) , cong (act a) eq
IL-mult-‚Ñù> A E X Y (d , err e) ((tt , inj‚ÇÇ tt) , j , p , tt) = ((tt , tt) , (inj‚ÇÇ tt)) , refl
IL-mult-‚Ñù> A E X Y (ret t , ret y) ((tt , i) , j , p , tt) = ((tt , tt) , (inj‚ÇÅ p)) , refl
IL-mult-‚Ñù> A E X Y (ret t , act a r) ((tt , inj‚ÇÅ tt) , j , p , tt) =
  ((tt , tt) , (inj‚ÇÅ p)) , refl
IL-mult-‚Ñù> A E X Y (ret t , err e) ((tt , inj‚ÇÅ tt) , j , p , tt) =
  ((tt , tt) , (inj‚ÇÅ p)) , refl

